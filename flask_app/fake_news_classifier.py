"""
Import libraries for ML
"""
import os
import numpy as np
import itertools
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.linear_model import PassiveAggressiveClassifier


# Values of Token Generated by Both The Vectorizers Are Same

# Confusion Matrix

import matplotlib.pyplot as plt


def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    See full source and example:
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html

    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.show()


def get_tests_results():
    """

    :return: a result of training
    """
    # Reading data as pandas dataframe
    temp_dir = os.getcwd()
    os.chdir("..")
    my_frame = pd.read_csv(os.path.join(os.getcwd(), '.ipynb_checkpoints', 'train_model.csv'), error_bad_lines=False)
    my_test_frame = pd.read_csv(os.path.join(os.getcwd(), '.ipynb_checkpoints', 'my_test_model.csv'),
                                error_bad_lines=False)

    my_frame.shape

    my_y = my_frame.label

    my_test2_y = my_test_frame.label

    my_frame.drop("label", axis=1)

    X_train, X_test, y_train, y_test = train_test_split(my_frame['text'], my_y,
                                                        test_size=0.4, random_state=53)

    X_test[0], y_test[0] = my_test_frame['text'][0], my_test2_y[0]

    # Building Vectorizer Classifiers

    ## 1. By Using Count Vectorizer

    # Initialize the `count_vectorizer`
    count_vectorizer = CountVectorizer(stop_words='english')

    # Fit and transform the training data.
    count_train = count_vectorizer.fit_transform(X_train)

    # Transform the test set
    count_test = count_vectorizer.transform(X_test)

    ## 2. By Using Tf-IDF Vectorizer

    # Initialize the `tfidf_vectorizer`
    tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

    # Fit and transform the training data
    tfidf_train = tfidf_vectorizer.fit_transform(X_train)

    # Transform the test set
    tfidf_test = tfidf_vectorizer.transform(X_test)

    # Drawing Confusion Matrix With Passive Agressive Classifier

    linear_clf = PassiveAggressiveClassifier()
    linear_clf.fit(tfidf_train, y_train)
    print('linear_clf', linear_clf)

    pred = linear_clf.predict(tfidf_test)

    print("pred", pred)
    np.savetxt(os.path.join(".ipynb_checkpoints", "model_result"), pred, delimiter=':', fmt='%s')

    score = accuracy_score(y_test, pred)
    print("accuracy:   %0.3f" % score)
    cm = confusion_matrix(y_test, pred, labels=['FAKE', 'REAL'])
    plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])

    os.chdir(temp_dir)


if __name__ == '__main__':
    print(get_tests_results())
